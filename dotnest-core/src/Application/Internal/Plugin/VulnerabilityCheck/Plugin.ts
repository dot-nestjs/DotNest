import {
  BasePlugin,
  DotNestApplicationPreStartupEvent,
  IDotNestApplicationPreStartupEventListener,
  Parallel,
} from "../../../../index";
import * as fs from "fs";
import * as path from "path";
import { PackageResult } from "./Result/PackageResult";
import { BatchQueryQueriesPayload } from "./Payload/BatchQueryQueriesPayload";
import axios from "axios";
import { BatchQueryPayload } from "./Payload/BatchQueryPayload";
import { OsvResult } from "./Result/OsvResult";
import { BatchQueryResult } from "./Result/BatchQueryResult";

export class Plugin
  extends BasePlugin
  implements IDotNestApplicationPreStartupEventListener
{
  async executeDotNestApplicationPreStartupAsync(
    event: DotNestApplicationPreStartupEvent
  ): Promise<void> {
    await Parallel.forEach(event.context, async (context) => {
      const packageFile = path.resolve(context, "..", "package.json");
      if (await Parallel.fileExistAsync(packageFile)) {
        const body = await this.buildOsvBodyAsync(packageFile);
        if (body.length > 0) {
          const instance = axios.create({
            baseURL: "https://api.osv.dev/v1",
          });
          const response = await instance.post<OsvResult<BatchQueryResult[]>>(
            "querybatch",
            {
              queries: body,
            } satisfies BatchQueryPayload
          );

          for (let i = 0; i < response.data.results.length; i++) {
            const result = response.data.results[i];
            if (result.vulns != undefined) {
              const effectedPackage = body[i];
              this.error(
                "╭────────────────────────────────────────────────╮"
              );
              this.error("│\t\t\t\t\t\t│");
              this.error(
                `│\tPackage: ${effectedPackage.package.name} (version: ${effectedPackage.version})\t│`
              );
              for (const vuln of result.vulns) {
                this.error(`│\tReference: ${vuln.id}\t\t│`);
              }
              this.error("│\t\t\t\t\t\t│");
              this.error(
                '╰────────────────────────────────────────────────╯',
              );
            }
          }
        }
      }
    });
  }

  private async buildOsvBodyAsync(
    packageFile: string
  ): Promise<BatchQueryQueriesPayload[]> {
    const result: BatchQueryQueriesPayload[] = [];
    const packageJson = await fs.promises.readFile(packageFile, {
      encoding: "utf-8",
    });
    const packageResult = JSON.parse(packageJson) as PackageResult;
    this.addPackages(result, packageResult.dependencies);
    this.addPackages(result, packageResult.devDependencies);
    this.addPackages(result, packageResult.peerDependencies);
    return result;
  }

  addPackages(
    result: BatchQueryQueriesPayload[],
    data: Record<string, string> | undefined
  ) {
    if (data != undefined) {
      for (const [packageName, version] of Object.entries(data)) {
        if (version.startsWith("../")) {
          continue;
        }
        result.push({
          version: version,
          package: {
            name: packageName,
            ecosystem: "npm",
          },
        });
      }
    }
  }

  name(): string {
    return "VulnerabilityCheck";
  }
}
